// <auto-generated />
using System;
using Cruise.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cruise.Migrations
{
    [DbContext(typeof(CruiseDbContext))]
    partial class CruiseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("Cruise.Model.AEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<string>("EMPLOYEE_TYPE")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("LAST_NAME");

                    b.HasKey("Id");

                    b.ToTable("EMPLOYEES_ST");

                    b.HasDiscriminator<string>("EMPLOYEE_TYPE").HasValue("AEmployee");
                });

            modelBuilder.Entity("Cruise.Model.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BOOKING_ID");

                    b.Property<DateTime>("BookedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("BOOKED_AT");

                    b.HasKey("Id");

                    b.ToTable("BOOKINGS");
                });

            modelBuilder.Entity("Cruise.Model.Cabin", b =>
                {
                    b.Property<int>("ShipId")
                        .HasColumnType("int")
                        .HasColumnName("SHIP_ID");

                    b.Property<int>("CabinNr")
                        .HasColumnType("int")
                        .HasColumnName("CABIN_NR");

                    b.Property<int>("CabinSize")
                        .HasColumnType("int")
                        .HasColumnName("CABIN_SIZE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("DESCRIPTION");

                    b.HasKey("ShipId", "CabinNr");

                    b.ToTable("CABINS");
                });

            modelBuilder.Entity("Cruise.Model.Cruise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CRUISE_ID");

                    b.Property<DateTime>("ArrivedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ARRIVED_AT");

                    b.Property<DateTime>("DepartedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DEPARTED_AT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("LABEL");

                    b.Property<int?>("ShipId")
                        .HasColumnType("int")
                        .HasColumnName("SHIP_ID");

                    b.HasKey("Id");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.HasIndex("ShipId");

                    b.ToTable("CRUISES");
                });

            modelBuilder.Entity("Cruise.Model.CruiseBooking", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BOOKING_ID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<int>("CabinNr")
                        .HasColumnType("int")
                        .HasColumnName("CABIN_NR");

                    b.Property<int>("ShipId")
                        .HasColumnType("int")
                        .HasColumnName("SHIP_ID");

                    b.Property<int>("CruiseId")
                        .HasColumnType("int")
                        .HasColumnName("CRUISE_ID");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("PRICE");

                    b.HasKey("BookingId", "CustomerId", "CabinNr", "ShipId", "CruiseId");

                    b.HasIndex("CruiseId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShipId", "CabinNr");

                    b.ToTable("CRUISE_HAS_BOOKINGS_JT");
                });

            modelBuilder.Entity("Cruise.Model.CruiseRoute", b =>
                {
                    b.Property<int>("CruiseId")
                        .HasColumnType("int")
                        .HasColumnName("CRUISE_ID");

                    b.Property<int>("DepartmentHarborId")
                        .HasColumnType("int")
                        .HasColumnName("DEPARTURE_HARBOR_ID");

                    b.Property<int>("ArrivalHarborId")
                        .HasColumnType("int")
                        .HasColumnName("ARRIVAL_HARBOR_ID");

                    b.Property<decimal>("RouteIndex")
                        .HasColumnType("DECIMAL(3,0)")
                        .HasColumnName("ROUTE_INDEX");

                    b.HasKey("CruiseId", "DepartmentHarborId", "ArrivalHarborId");

                    b.HasIndex("DepartmentHarborId", "ArrivalHarborId");

                    b.ToTable("CRUISE_HAS_ROUTES_JT");
                });

            modelBuilder.Entity("Cruise.Model.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("LAST_NAME");

                    b.HasKey("Id");

                    b.ToTable("CUSTOMERS");
                });

            modelBuilder.Entity("Cruise.Model.Harbor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HARBOR_ID");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("CONTINENT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("COUNTRY");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("LOCATION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("NAME");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("VARCHAR(8)")
                        .HasColumnName("POSTAL_CODE");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("STREET");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("HARBORS");
                });

            modelBuilder.Entity("Cruise.Model.Occupation", b =>
                {
                    b.Property<int>("CruiseId")
                        .HasColumnType("int")
                        .HasColumnName("CRUISE_ID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("EMPLOYEE_ROLE");

                    b.HasKey("CruiseId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CRUISE_HAS_EMPLOYEES_JT");
                });

            modelBuilder.Entity("Cruise.Model.Route", b =>
                {
                    b.Property<int>("DepartureHarborId")
                        .HasColumnType("int")
                        .HasColumnName("DEPARTURE_HARBOR_ID");

                    b.Property<int>("ArrivalHarborId")
                        .HasColumnType("int")
                        .HasColumnName("ARRIVAL_HARBOR_ID");

                    b.Property<decimal>("Distance")
                        .HasColumnType("DECIMAL(8,0)")
                        .HasColumnName("DISTANCE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("NAME");

                    b.HasKey("DepartureHarborId", "ArrivalHarborId");

                    b.HasIndex("ArrivalHarborId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ROUTES_JT");
                });

            modelBuilder.Entity("Cruise.Model.Ship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SHIP_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("NAME");

                    b.Property<string>("ShipClassification")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("SHIP_CLASSIFICATION");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SHIPS");
                });

            modelBuilder.Entity("Cruise.Model.Engineer", b =>
                {
                    b.HasBaseType("Cruise.Model.AEmployee");

                    b.ToTable("EMPLOYEES_ST");

                    b.HasDiscriminator().HasValue("ENGINEER");
                });

            modelBuilder.Entity("Cruise.Model.Officer", b =>
                {
                    b.HasBaseType("Cruise.Model.AEmployee");

                    b.ToTable("EMPLOYEES_ST");

                    b.HasDiscriminator().HasValue("OFFICER");
                });

            modelBuilder.Entity("Cruise.Model.ServiceEmployee", b =>
                {
                    b.HasBaseType("Cruise.Model.AEmployee");

                    b.ToTable("EMPLOYEES_ST");

                    b.HasDiscriminator().HasValue("SERVICE");
                });

            modelBuilder.Entity("Cruise.Model.Cabin", b =>
                {
                    b.HasOne("Cruise.Model.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Cruise.Model.Cruise", b =>
                {
                    b.HasOne("Cruise.Model.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Cruise.Model.CruiseBooking", b =>
                {
                    b.HasOne("Cruise.Model.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cruise.Model.Cruise", "Cruise")
                        .WithMany()
                        .HasForeignKey("CruiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cruise.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cruise.Model.Cabin", "Cabin")
                        .WithMany()
                        .HasForeignKey("ShipId", "CabinNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Cabin");

                    b.Navigation("Cruise");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Cruise.Model.CruiseRoute", b =>
                {
                    b.HasOne("Cruise.Model.Cruise", "Cruise")
                        .WithMany()
                        .HasForeignKey("CruiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cruise.Model.Route", "Route")
                        .WithMany()
                        .HasForeignKey("DepartmentHarborId", "ArrivalHarborId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cruise");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Cruise.Model.Occupation", b =>
                {
                    b.HasOne("Cruise.Model.Cruise", "Cruise")
                        .WithMany()
                        .HasForeignKey("CruiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cruise.Model.AEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cruise");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Cruise.Model.Route", b =>
                {
                    b.HasOne("Cruise.Model.Harbor", "ArrivalHarbor")
                        .WithMany()
                        .HasForeignKey("ArrivalHarborId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cruise.Model.Harbor", "DepartureHarbor")
                        .WithMany()
                        .HasForeignKey("DepartureHarborId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArrivalHarbor");

                    b.Navigation("DepartureHarbor");
                });
#pragma warning restore 612, 618
        }
    }
}
